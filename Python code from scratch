import numpy as np
import matplotlib.pyplot as plt

class Perceptron:
    def __init__(self, input_dim, hidden_dim, output_dim, lr=0.01):
        self.w1 = np.random.normal(0.0, pow(hidden_dim*input_dim, -0.5), (input_dim, hidden_dim))
        self.w2 = np.random.normal(0.0, pow(hidden_dim*output_dim, -0.5), (hidden_dim, output_dim))
        self.h = np.zeros((1,hidden_dim))
        self.lr = lr
        self.input_dim = input_dim
        self.hidden_dim = hidden_dim
        self.output_dim = output_dim
        self.theta = 0
        
    def sigmoid(self, x):
        return (1+np.exp(-x))**(-1)
    
    def feedforward(self, x):
        a = x.astype(float)
        b = self.w1.astype(float)
        self.h = self.sigmoid(np.dot(a,b) - self.theta)
        return self.sigmoid(np.dot(self.h, self.w2) - self.theta)
    
    def feedforward_upto_hidden(self,x):
        return self.sigmoid(np.dot(x, self.w1) - self.theta)
    
    def bprop_w2(self,g,y):
        q = (-2)*(g-y)*y*(1-y)
        return np.dot(self.h.reshape(self.hidden_dim,1), q.reshape(1, self.output_dim))
    
    def bprop_w1(self, g, y, x):
        q1 = (-2)*(g-y)*y*(1-y)
        q2 = np.dot(self.w2, q1)
        return np.dot(x.reshape(self.input_dim, 1), q2*self.h*(1-self.h).reshape(1,self.hidden_dim))

    def training(self, X, target):
        x = np.array(X).T
        y = self.feedforward(x)
        g = np.array(target).T
        
        self.w1 = self.w1 - self.lr*self.bprop_w1(g,y,x)
        self.w2 = self.w2 - self.lr*self.bprop_w2(g,y)
        
input_dim = 784
hidden_dim = 100
output_dim = 10
epoch = 10

pct = Perceptron(784, 100, 10, lr=0.1)

with open('mnist_train_60000.csv', 'r') as training_dataset_file:
    training_dataset_list = training_dataset_file.readlines()

input_list = list()
for k in range(epoch):
    print(k)
    pct.lr = pct.lr * 0.9
    for i in training_dataset_list:
        all_values = i.split(',')
        inputs = (np.asfarray(all_values[1:])/255.0*0.99) + 0.01
        input_list.append(inputs)

        targets = np.zeros(output_dim) + 0.01
        targets[int(all_values[0])] = 0.99

        pct.training(inputs, targets)

with open('mnist_test_10000.csv', 'r') as test:
    test_dataset_list = test.readlines()
all_values = test_dataset_list[0].split(',')

success = 0
failure = 0

failed_prediction_result = []
failed_prediction_im_list = []

for i in test_dataset_list:
    all_values = i.split(',')
    target = int(all_values[0])
    
    all_values_normalized = (np.asfarray(all_values[1:])/255.0*0.99) + 0.01
    prediction_list = pct.feedforward(np.asfarray(all_values_normalized))
    prediction = np.argmax(prediction_list)
    
    if target == prediction:
        success = success + 1
    else:
        failure = failure + 1
        failed_prediction_result.append([prediction,all_values[0]])
        failed_prediction_im_list.append(all_values_normalized)
        im_array = np.asfarray(all_values_normalized).reshape((28, 28))
        
print('Recognition error rate = ', (failure/(success+failure)))

for i in range(20):
    im_array = np.asfarray(failed_prediction_im_list[i]).reshape(28,28)
    
    plt.figure()
    plt.title('Predicted: {Predicted}, Actual: {Actual}'.format(Predicted = failed_prediction_result[i][0], 
                                                               Actual = failed_prediction_result[i][1]))
    plt.imshow(im_array, cmap='Greys', interpolation = 'None')
